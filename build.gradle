import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript{
  ext {
    kotlinVersion = '1.4.0'
    kotlinCoroutinesVersion = '1.3.9'
    grpcVersion = '1.31.1'
    protobufVersion = '3.13.0'
    protobufGradleVersion = '0.8.12'
  }
}

plugins {
  id("org.jetbrains.kotlin.jvm") version "$kotlinVersion"
  id('java-library')
  id("org.jetbrains.dokka") version "0.10.0"
  id('maven-publish')
  id("com.diffplug.gradle.spotless") version "3.27.1"
  id('jacoco')
  id("com.google.protobuf") version "$protobufGradleVersion"
  id('idea')
}

apply from: 'jacoco.gradle'

group = "tech.relaycorp"

repositories {
  jcenter()
}

dependencies {
  // Java
  implementation "javax.annotation:javax.annotation-api:1.3.2"

  // Kotlin
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"

  // Relaynet
  implementation "tech.relaycorp:relaynet:1.36.0"

  // Protobuf
  implementation "com.google.protobuf:protobuf-gradle-plugin:$protobufGradleVersion"
  implementation "com.google.protobuf:protobuf-java:$protobufVersion"
  implementation "com.google.protobuf:protobuf-java-util:$protobufVersion"

  // gRPC
  implementation "io.grpc:grpc-protobuf:$grpcVersion"
  implementation "io.grpc:grpc-stub:$grpcVersion"

  // Get Bouncy Castle just so we can do Base64 encoding. This is a massive overkill, but we can't
  // use java.util.Base64 on Android's API 21 and we can't use Apache Commons Codec because it'd
  // break on Android  https://blog.osom.info/2015/04/commons-codec-on-android.html.
  implementation "org.bouncycastle:bcpkix-jdk15on:1.66"

  // Testing
  testImplementation "org.junit.jupiter:junit-jupiter:5.6.2"
  testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutinesVersion"
  testImplementation "io.grpc:grpc-testing:$grpcVersion"
  testImplementation "io.grpc:grpc-netty:$grpcVersion"
  testImplementation "io.netty:netty-tcnative-boringssl-static:2.0.31.Final"
  testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
  testImplementation "org.mockito:mockito-inline:3.5.5"
}

java {
  withJavadocJar()
  withSourcesJar()
}

tasks.withType(KotlinCompile).configureEach {
  kotlinOptions.jvmTarget = "1.8"
}

tasks.withType(KotlinCompile).all {
  kotlinOptions.freeCompilerArgs = kotlinOptions.freeCompilerArgs + [
    "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
    "-Xuse-experimental=kotlinx.coroutines.FlowPreview",
    "-Xuse-experimental=kotlin.time.ExperimentalTime"
  ]
}

// Protobuf

protobuf {
  protoc { artifact = "com.google.protobuf:protoc:$protobufVersion" }
  plugins {
    grpc { artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion" }
  }
  generateProtoTasks {
    all().forEach {
      it.plugins { grpc {} }
    }
  }
}

sourceSets {
  main {
    kotlin {
      srcDirs("build/generated/source/proto/main/grpc")
      srcDirs("build/generated/source/proto/main/java")
    }
  }
}

// Documentation

tasks.dokka {
  outputFormat = "html"
  outputDirectory = "$buildDir/javadoc"
}

// Publishing

publishing {
  publications {
    create("default", MavenPublication) {
      from(components["java"])

      pom {
        name.set(rootProject.name)
        description.set("Relaynet CogRPC binding")
        url.set("https://github.com/relaycorp/relaynet-cogrpc-jvm")
        developers {
          developer {
            id.set("relaycorp")
            name.set("Relaycorp, Inc.")
            email.set("no-reply@relaycorp.tech")
          }
        }
        licenses {
          license {
            name.set("Apache-2.0")
          }
        }
        scm {
          connection.set("scm:git:https://github.com/relaycorp/relaynet-cogrpc-jvm.git")
          developerConnection.set(
            "scm:git:https://github.com/relaycorp/relaynet-cogrpc-jvm.git"
          )
          url.set("https://github.com/relaycorp/relaynet-cogrpc-jvm")
        }
      }
    }
  }
  repositories {
    maven {
      // publish=1 automatically publishes the version
      url = uri(
        "https://api.bintray.com/maven/relaycorp/maven/tech.relaycorp.cogrpc/;publish=1"
      )
      credentials {
        username = System.getenv("BINTRAY_USERNAME")
        password = System.getenv("BINTRAY_KEY")
      }
    }
  }
}

// Lint

spotless {
  def ktlintUserData = [
    "max_line_length": "100",
    "disabled_rules": "import-ordering"
  ]
  kotlin {
    ktlint("0.36.0").userData(ktlintUserData)
  }
  kotlinGradle {
    ktlint().userData(ktlintUserData)
  }
}
