import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript{
  ext {
    kotlinVersion = '1.5.20'
    kotlinCoroutinesVersion = '1.5.2'
    grpcVersion = '1.39.0'
    protobufVersion = '3.17.3'
    protobufGradleVersion = '0.8.18'
  }
}

plugins {
  id("org.jetbrains.kotlin.jvm") version "$kotlinVersion"
  id('java-library')
  id("org.jetbrains.dokka") version "1.6.0"
  id("com.diffplug.spotless") version "5.14.1"
  id('jacoco')
  id("com.google.protobuf") version "$protobufGradleVersion"
  id('idea')

  id('signing')
  id('maven-publish')
  id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
}

apply from: 'jacoco.gradle'
apply from: 'release.gradle'

group = "tech.relaycorp"

repositories {
  mavenCentral()

  // TODO: Remove once all of Dokka's dependencies are available on Maven Central
  jcenter()
}

dependencies {
  // Java
  implementation "javax.annotation:javax.annotation-api:1.3.2"

  // Kotlin
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"

  // Relaynet
  implementation "tech.relaycorp:awala:[1.48.5,2.0.0)"

  // Protobuf
  implementation "com.google.protobuf:protobuf-gradle-plugin:$protobufGradleVersion"
  implementation "com.google.protobuf:protobuf-java:$protobufVersion"
  implementation "com.google.protobuf:protobuf-java-util:$protobufVersion"

  // gRPC
  implementation "io.grpc:grpc-protobuf:$grpcVersion"
  implementation "io.grpc:grpc-stub:$grpcVersion"

  // Get Bouncy Castle just so we can do Base64 encoding. This is a massive overkill, but we can't
  // use java.util.Base64 on Android's API 21 and we can't use Apache Commons Codec because it'd
  // break on Android  https://blog.osom.info/2015/04/commons-codec-on-android.html.
  implementation "org.bouncycastle:bcpkix-jdk15on:1.70"

  // Testing
  testImplementation "org.junit.jupiter:junit-jupiter:5.8.2"
  testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutinesVersion"
  testImplementation "io.grpc:grpc-testing:$grpcVersion"
  testImplementation "io.grpc:grpc-netty:$grpcVersion"
  testImplementation "io.netty:netty-tcnative-boringssl-static:2.0.47.Final"
  testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
  testImplementation "org.mockito:mockito-inline:4.2.0"
}

java {
  withJavadocJar()
  withSourcesJar()
}

tasks.withType(KotlinCompile).configureEach {
  kotlinOptions.jvmTarget = "1.8"
}

tasks.withType(KotlinCompile).all {
  kotlinOptions.freeCompilerArgs = kotlinOptions.freeCompilerArgs + [
    "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
    "-Xuse-experimental=kotlinx.coroutines.FlowPreview",
    "-Xuse-experimental=kotlin.time.ExperimentalTime"
  ]
}

// Protobuf

protobuf {
  protoc { artifact = "com.google.protobuf:protoc:$protobufVersion" }
  plugins {
    grpc { artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion" }
  }
  generateProtoTasks {
    all().forEach {
      it.plugins { grpc {} }
    }
  }
}

sourceSets {
  main {
    kotlin {
      srcDirs("build/generated/source/proto/main/grpc")
      srcDirs("build/generated/source/proto/main/java")
    }
  }
}

// Documentation

dokkaHtml.configure {
  dokkaSourceSets {
    configureEach {
      reportUndocumented.set(true)
      includes.from("api-docs.md")
    }
  }
}

// Lint

spotless {
  def ktlintUserData = [
    "max_line_length": "100",
    "disabled_rules": "import-ordering"
  ]
  kotlin {
    ktlint("0.36.0").userData(ktlintUserData)
  }
  kotlinGradle {
    ktlint().userData(ktlintUserData)
  }
}
